---
- name: EXOS Operation Box_LOG
  hosts: log
  gather_facts: no
  connection: local
  vars: 
   - vendor: "Extreme Networks"
   - hostname: "hostname"
   - IPADD: "IPADD"
   - TEM: "TMP_STAT"
   - CPUS: "CPU_STAT"
   - FANST: "FAN_STAT"
   - VERSIONC: "IMG"
   - UPTIMES: "UPTIME"
   - CPU_UT: "CPU_UT"
   - MEM_UT: "MEM_UT"
   - PORT_S: "PORT_STAT"   
     
      
  tasks:
   - name: Make Backup Directory
     local_action:
       module: file
       path: "/etc/ansible/backup_ext_telnet/{{ lookup('pipe', 'date +%Y%m%d') }}"
       state: directory
       mode: u=rwX,g=rX,o=rX

   - name: Read file in Fans
     shell: "cat /etc/ansible/Switch/{{ inventory_hostname }} | egrep 'State:                  '"
     ignore_errors: True
     register: Fans
     
   - name: Fan state check
     debug: msg="{% if Fans.stdout in 'Failed' %} 비정상 {% else %} 정상 {% endif %}"
     register: Fan_state
     ignore_errors: True

   - name: Read file in Temp
     shell: cat /etc/ansible/Switch/{{ inventory_hostname }} | egrep "Switch         :"
     register: Temp
     ignore_errors: True

   - name: Temp state check
     debug: msg="{% if 'Normal' in Temp.stdout %} 정상  {% else %} 비정상 {% endif %}"
     register: Temp_state
     ignore_errors: True

   - name: Read file in VERSION
     shell: "cat /etc/ansible/Switch/{{ inentory_hostname}} | grep 'Image   :' | awk '{print $5}'"
     register: VERSION
     ignore_errors: True

   - name: Read file in UPTIME
     shell: cat /etc/ansible/Switch/{{ inventory_hostname }} | grep 'System UpTime' | awk '{print $3$4}'
     register: UPTIME
     ignore_errors: True
       
   - name: Read file in CPU
     shell: "cat /etc/ansible/Switch/{{ inventory_hostname }} | grep 'CPU:  ' | awk '{print $1$2}'"
     register: CPU
     ignore_errors: True

   - name: CPU utility compare
     debug: msg="{% if CPU.stdout|regex_search('\d+')|int < 60 %} 정상 {% else %} 비정상 {% endif %}"
     register: CPU_state
     ignore_errors: True
     
   - name: Read file in MemoryT
     shell: cat /etc/ansible/Switch/{{ inventory_hostname }} | grep "Total DRAM (KB):"
     register: MemoryT
     ignore_errors: True
     
   - name: Read file in MemoryS
     shell: cat /etc/ansible/Switch/{{ inventory_hostname }} | grep "System     (KB):"
     register: MemoryS
     ignore_errors: True
     
   - name: Read file in MemoryU
     shell: cat /etc/ansible/Switch/{{ inventory_hostname }} | grep "User       (KB):"
     register: MemoryU
     ignore_errors: True
     
   - name: arithmetic facs
     set_fact: set="{{ (MemoryS.stdout|regex_search('\d+')|int + MemoryU.stdout|regex_search('\d+')|int) / MemoryT.stdout|regex_search('\d+')|int * 100}}"
     ignore_errors: True
     
   - name: memory utility compare
     debug: msg="{% if set|regex_search('\d+')|int < 60 %} MEM state OK {% else %} MEM state check {% endif %}"
     register: Memory_state
     ignore_errors: True

   - name: Read file in PORT
     shell: cat /etc/ansible/Switch/{{ inventory_hostname }} | sed -n '/show ports txerrors no-refresh/,/show ports transceiver information/'p | grep -o '[0-9]'* | awk '{if ($0<100) { print "OK" } else { print "Check" } }'
     ignore_errors: True
     register: port
         
   - name: Read file in IP
     shell: cat /etc/ansible/Switch/{{ inventory_hostname }} | egrep "configure vlan Mgmt ipaddress" | awk '{print $5}'
     ignore_errors: True
     register: IP
     
   - name: PORT Error compare
     debug: msg="{% if port.stdout in "Check" %} 비정상 {% else %} 정상 {% endif %}"
     register: PORT_state
     ignore_errors: True
     
   - name: Make Result Directory
     local_action:
       module: file
       path: "/etc/ansible/result_ext_telnet/{{ lookup('pipe', 'date +%Y%m%d') }}"
       state: directory
       mode: u=rwX,g=rX,o=rX

   - name: show_Result
     local_action:
       copy content="{{ hostname }} | {{ IPADD }} | {{ TEM }} | {{ CPUS }} | {{ FANST }} | {{ VERSIONC }} | {{ UPTIMES }} | {{ CPU_UT }} | {{ MEM_UT }} | {{ PORT_S }}\n{{ inventory_hostname }} | {{ IP.stdout }}| {{ Temp_state }}|{{ CPU_state }}|{{ Fan_state }}| {{ VERSION.stdout }} | {{ UPTIME.stdout }} | {{ CPU.stdout |regex_search('\d*')|int }} | {{ set|regex_search('\d*')|int }} | {{ PORT_state }} |"
       dest=/etc/ansible/result_ext_telnet/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}
     ignore_errors: True
     
   - name: Result modify
     replace:
       path: /etc/ansible/result_ext_telnet/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}
       regexp: "', 'failed': False, 'changed': False}"
       replace: ""

   - name: Result modify2
     replace:
       path: /etc/ansible/result_ext_telnet/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}
       regexp: "{'msg': '"
       replace: ""

   - name: Assemble Result Summary
     assemble:
       src: "/etc/ansible/result_ext_telnet/{{ lookup('pipe', 'date +%Y%m%d') }}/"
       dest: "/etc/ansible/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_Summary_EXOS_telnet.txt"

   - name: Read users from CSV file and return a list
     copy:
      src: "/etc/ansible/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_Summary_EXOS_telnet.txt"
      dest: "/etc/ansible/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_Summary_EXOS_telnet.csv"












#   - name: Read file in MODEL
#     shell: cat /etc/ansible/backup_ext_telnet/$(date +%Y%m%d)/{{ inventory_hostname }} | grep 'System Type' | awk '{print $3}'
#     register: MODEL
#
#   - name: Read file in Serial
#     shell: cat /etc/ansible/backup_ext_telnet/$(date +%Y%m%d)/{{ inventory_hostname }} | grep 'IMG:' | awk '{print $4}'
#     register: SERIAL
#
      
#   - name: Power state check
#     debug: msg="{% if 'Failed' in show.stdout[8] %} PWR state Check {% else %} PWR state OK {% endif %}"
#     register: Power_state
#
#
#
#
#   - name: CPU check
#     debug: msg={{ CPU.stdout }}






      
      
      
      
#
#
#  - name: Read file1
#    shell: cat /etc/ansible/backup_ext_telnet/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }} | grep Free |awk '{print $3}'
#    register: HOST_MGMT1
#
#
#
#      copy: "/etc/ansible/backup_ext_telnet/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}"
#  - name: debug
#    debug: msg="{{ vm }}"
#      backup: yes
#      backup_options:
#        filename: showbackup
#        dir_path: /etc/ansible/backup_ext_telnet/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}
#       
#      dest: /etc/ansible/backup_ext_telnet/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}
#
#  - name: read file0
#    shell: 'cat /etc/ansible/backup/$(date +%Y%m%d)/{{ inventory_hostname }} | grep "Current time"'
#    register: HOST_MGMT0
#
#  - name: Read file1
#    shell: "cat /etc/ansible/backup/$(date +%Y%m%d)/{{ inventory_hostname }}"
#    register: HOST_MGMT1
#
#  - name: Alarm check
#    when: '"{{ item }} alarms currently active" in HOST_MGMT1.stdout'
#    debug: msg="{% if 'No alarms currently active' in HOST_MGMT1.stdout %} ALM state OK {% else %}  ALM state check {% endif %}"
#    register: result_alarm
#    with_sequence: '0-10'
#
#  - name: NTP check
#    debug: msg="{% if 'sync_ntp' in HOST_MGMT1.stdout %}  NTP state OK {% else %}  NTP state check {% endif %}"
#    register: result_ntp
#
#  - name: read file2
#    shell: 'cat /etc/ansible/backup/$(date +%Y%m%d)/{{ inventory_hostname }} | grep FPC'
#    ignore_errors: True
#    register: HOST_MGMT3
#
#  - name: ENV check
#    when: '"Absent" or "Present" or "Failed" or "Check" in HOST_MGMT3.stdout'
#    debug: msg="ENV check"
#    ignore_errors: True
#    register: result_env
#
#  - name: read file3
#    shell: 'cat /etc/ansible/backup/$(date +%Y%m%d)/{{ inventory_hostname }} | grep "Memory"'
#    ignore_errors: True
#    register: HOST_MGMT4
#
#  - name: Memory check
#    debug: msg="{% if HOST_MGMT4.stdout | regex_search('\d+') | int < 60 %}  MEM state OK {% else %}  MEM state check {% endif %}"
#    register: result_memory
#
#  - name: read file4
#    shell: 'cat /etc/ansible/backup/$(date +%Y%m%d)/{{ inventory_hostname }} | grep "Idle"'
#    ignore_errors: True
#    register: HOST_MGMT5
#
#  - name: Make Result Directory
#    local_action:
#      module: file
#      path: "/etc/ansible/result/{{ lookup('pipe', 'date +%Y%m%d') }}"
#      state: directory
#      mode: u=rwX,g=rX,o=rX
#
#  - name: Result summary
#    local_action:
#      copy content="##########_{{ inventory_hostname }}_##########\n{{ HOST_MGMT0.stdout }}\n{{result_alarm}}\n{{ result_ntp }}\n{{ result_env }}\n{{ result_memory }}\n\n"
#      dest="/etc/ansible/result/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}"
#
#  - name: Assemble from fragments from a directory
#    assemble:
#      src: "/etc/ansible/result/{{ lookup('pipe', 'date +%Y%m%d') }}/"
#      dest: "/etc/ansible/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary_extelnet.txt"
#    ignore_errors: True
#    register: Result_summary_extelnet
#
#  - name: Result modify1
#    replace:
#      path: "/etc/ansible/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary_extelnet.txt"
#      regexp: "'msg': u'"
#      replace: ""
#
#  - name: Result modify2
#    replace:
#      path: "/etc/ansible/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary_extelnet.txt"
#      regexp: "'skip_reason': u'Conditional result was False', 'skipped': True, 'changed': False"
#      replace: "OK"
#
#  - name: Result modify3
#    replace:
#      path: "/etc/ansible/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary_extelnet.txt"
#      regexp: "'failed': False, 'changed': False"
#      replace: ""
#
#  - name: Result modify4
#    lineinfile:
#      dest: "/etc/ansible/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary_extelnet.txt"
#      state: present
#      regexp: 'ALM state check'
#      line: '{Alarm check}'
#      create: yes
#
#  - name: Read users from CSV file and return a list
#    copy:
#      src: "/etc/ansible/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary_extelnet.txt"
#      remote_src: yes
#      dest: "/etc/result/ResultSSUM.csv"
